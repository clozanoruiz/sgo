# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# See https://github.com/r-lib/actions/tree/master/examples#readme for
# additional example workflows available for the R community.

name: R-CMD-check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    strategy:
      fail-fast: true
      matrix:
        config:
          - { os: macOS-latest,   r: "release" }
          #- { os: ubuntu-latest,  r: "devel" }
          - { os: ubuntu-20.04,   r: "release" }
          - { os: windows-latest, r: "devel" }
          - { os: windows-latest, r: "release" }
          - { os: windows-latest, r: "3.6" }
          - { os: windows-latest, r: "3.5" }
          - { os: windows-latest, r: "3.4" }

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

    steps:
      - uses: actions/checkout@v2
      - name: Set up R ${{ matrix.config.r }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2

      #- name: "[Linux] Install spatial libraries"
      #  if: runner.os == 'Linux'
      #  run: sudo apt-get install libgdal-dev libproj-dev libgeos-dev libudunits2-dev
        run: sudo apt-get libcurl4-openssl-dev

      #- name: "[macOS] Install spatial libraries"
      #  if: runner.os == 'macOS'
      #  run: brew install pkg-config gdal proj geos

      - name: Query dependencies
        run: |
          install.packages(c("remotes", "tinytest"))
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        run: |
          Rscript -e "if (getRversion() <= '3.6.3') {remotes::install_deps(dependencies = TRUE, type = 'binary')} else {remotes::install_deps(dependencies = TRUE)}"
          Rscript -e "remotes::install_cran('rcmdcheck')"

      - name: Check
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show tinytest output
        if: always()
        run: find check -name 'tinytest.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
